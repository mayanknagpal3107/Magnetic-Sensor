
mg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000158  00000000  00000000  00000137  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e9  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000168  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/interrupt.h>
#include<util/delay.h>

void main()
{
	cbi(DDRA,0);
  6c:	d0 98       	cbi	0x1a, 0	; 26
	sbi(DDRC,3);
  6e:	a3 9a       	sbi	0x14, 3	; 20
	sbi(PORTC,3);
  70:	ab 9a       	sbi	0x15, 3	; 21
  72:	88 e8       	ldi	r24, 0x88	; 136
  74:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	20 e9       	ldi	r18, 0x90	; 144
  78:	31 e0       	ldi	r19, 0x01	; 1
  7a:	f9 01       	movw	r30, r18
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  82:	d9 f7       	brne	.-10     	; 0x7a <main+0xe>
	_delay_ms(500);
	cbi(PORTC,3);
  84:	ab 98       	cbi	0x15, 3	; 21
  86:	20 e9       	ldi	r18, 0x90	; 144
  88:	31 e0       	ldi	r19, 0x01	; 1
	while(1)
	{	if(bit_is_set(PINA,0))
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <main+0x34>
		{	sbi(PORTC,0);
  8e:	a8 9a       	sbi	0x15, 0	; 21
  90:	88 e8       	ldi	r24, 0x88	; 136
  92:	93 e1       	ldi	r25, 0x13	; 19
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9c:	d9 f7       	brne	.-10     	; 0x94 <main+0x28>
  9e:	f5 cf       	rjmp	.-22     	; 0x8a <main+0x1e>
			_delay_ms(500);
		}
		else
			cbi(PORTC,3);
  a0:	ab 98       	cbi	0x15, 3	; 21
  a2:	f3 cf       	rjmp	.-26     	; 0x8a <main+0x1e>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
